#!/bin/sh -e
#
# 2020 Marko Seric (marko.seric at ssrq-sds-fds.ch)
# 2020,2023 Dennis Camera (dennis.camera at riiengineering.ch)
# 2020 Beni Ruef (bernhard.ruef at ssrq-sds-fds.ch)
#
# This file is part of the skonfig set __easy_rsa.
#
# This set is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This set is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this set. If not, see <http://www.gnu.org/licenses/>.
#

quote() {
	sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" <<-EOF
	$*
	EOF
}

pki_dir=$(cat "${__object:?}/parameter/pki")

state_should=$(cat "${__object:?}/parameter/state")
state_is=$(cat "${__object:?}/explorer/state")

# NOTE: The following block is a bit of a "hack" to work around the fact that
#       requirements in cdist only work for code, but not for explorers. Due to
#       this, it could happen that the state explorer executes before the PKI
#       has been initialised.
if test "${state_is}" = 'no-pki'
then
	# Before doing anything else, check if the pki directory has been
	# initialised in the meantime if the explorer didn't find it.
	cat <<-EOF
	test -d $(quote "${pki_dir:?}") || {
		echo 'Could not find a PKI directory structure in ${pki_dir-?}.' >&2
		echo 'Please make sure that __easy_rsa_pki${pki_dir-} is run first.' >&2
		exit 1
	}
	EOF

	# NOTE: If the PKI has been freshly initialised, the cert can't have been
	#       generated previously, so it must be 'absent'.
	state_is='absent'
fi

# shellcheck source=/dev/null
. "${__type:?}/files/easyrsa_cmds.sh"

case ${state_should}
in
	(valid)
		case ${state_is}
		in
			(absent|unsigned)
				easyrsa_build_cmd
				;;
			(expired)
				easyrsa_update_db_cmd
				easyrsa_renew_cmd
				;;
			(valid)
				# nothing to do
				;;
		esac
		;;
	(signed)
		case ${state_is}
		in
			(absent|unsigned)
				easyrsa_build_cmd
				;;
			(expired|valid)
				# nothing to do
				;;
		esac
		;;
	(revoked)
		case ${state_is}
		in
			(absent|unsigned)
				# nothing to do
				;;
			(expired|valid)
				easyrsa_revoke_cmd
				;;
		esac
		;;
	(*)
		printf 'Invalid --state: %s\n' "${state_should}" >&2
		printf 'Must be one of: valid, signed, revoked\n' >&2
		exit 1
		;;
esac
